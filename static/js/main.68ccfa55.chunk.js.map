{"version":3,"sources":["state/LoadImages.js","state/SpeciesRecord.js","pagination/Pagination.js","StateSearch.js","Home.js","App.js","serviceWorker.js","index.js"],"names":["LoadImages","data","useState","images","setImages","clicked","setClicked","ignoreImages","useEffect","length","map","image","i","className","key","src","onClick","axios","get","window","location","host","includes","scientificName","then","resp","Object","values","query","pages","forEach","x","title","response","imageinfo","url","catch","error","console","SpeciesRecord","undefined","description","setDescription","loadingDescription","setLoadingDescription","imageSrc","setImageSrc","result","extract","thumbnail","source","primaryCommonName","speciesGlobal","family","informalTaxonomy","ReactHtmlParser","taxonomicComments","Pagination","resultsSummary","setPage","setRecordsPerPage","page","totalPages","StateSearch","selectedState","setSelectedState","setResult","recordsPerPage","post","log","onChange","e","currentTarget","value","state","speciesResults","total","results","speciesRecord","Home","App","href","to","exact","path","component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.68ccfa55.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport axios from 'axios';\n\nconst LoadImages = ({ data }) => {\n    const [images, setImages] = useState([]);\n    const [clicked, setClicked] = useState(false);\n    const ignoreImages = ['https://upload.wikimedia.org/wikipedia/commons/7/74/Red_Pencil_Icon.png', 'https://upload.wikimedia.org/wikipedia/en/4/4a/Commons-logo.svg', 'https://upload.wikimedia.org/wikipedia/commons/d/df/Wikispecies-logo.svg'];\n\n    const getImages = () => {\n        setClicked(true);\n        axios.get(`${window.location.host.includes('localhost') ? 'https://cors-anywhere.herokuapp.com/' : ''}https://en.wikipedia.org/w/api.php?action=query&format=json&prop=images&titles=${data.scientificName}`)\n        .then(resp => {\n            const images = Object.values(resp.data.query.pages)[0].images;\n            if (images) {\n                images.forEach(x => {\n                    axios.get(`${window.location.host.includes('localhost') ? 'https://cors-anywhere.herokuapp.com/' : ''}https://en.wikipedia.org/w/api.php?action=query&format=json&titles=${x.title}&prop=imageinfo&iiprop=url`)\n                    .then(response => {\n                        const imageinfo = Object.values(response.data.query.pages)[0].imageinfo;\n                        if (imageinfo) {\n                            const url = imageinfo[0].url;\n                            if (url && !ignoreImages.includes(url)) {\n                                setImages(images => [ ...images ,imageinfo[0].url]);\n                            }\n                        }\n                    });\n                });\n            }\n        })\n        .catch(error => {\n            console.error(error);\n        });\n    }\n\n    useEffect(() => {\n        setImages([]);\n        setClicked(false);\n    }, [data]);\n\n    return (\n        <div>\n            {images.length > 0 && images.map((image, i) => {\n                return <img className=\"image-fill-parent\" key={i} src={image} />\n            })}\n            {!clicked &&\n                (<button onClick={() => getImages()} >Load Images</button>)\n            }\n        </div>\n    );\n}\nexport default LoadImages;","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport ReactHtmlParser from 'react-html-parser';\nimport LoadImages from './LoadImages';\n\nconst SpeciesRecord = ({ data }) => {\n    const [description, setDescription] = useState(undefined);\n    const [loadingDescription, setLoadingDescription] = useState(false);\n    const [imageSrc, setImageSrc] = useState(undefined);\n    useEffect(() => {\n        setDescription(undefined);\n        setLoadingDescription(true);\n        if (data.scientificName) {\n            axios.get(`${window.location.host.includes('localhost') ? 'https://cors-anywhere.herokuapp.com/' : ''}https://en.wikipedia.org/w/api.php?action=query&titles=${data.scientificName}&prop=extracts&format=json&exintro=1`)\n                .then(resp => {\n                    const result = Object.values(resp.data.query.pages)[0].extract;\n                    setDescription(result ? result : '<p class=\"center\">No description found</p>');\n                    setLoadingDescription(false);\n                })\n                .catch(error => {\n                    console.error(error);\n                    setLoadingDescription(false);\n                });\n        }\n    }, [data]);\n    useEffect(() => {\n        setImageSrc(undefined);\n        if (data.scientificName) {\n            axios.get(`${window.location.host.includes('localhost') ? 'https://cors-anywhere.herokuapp.com/' : ''}https://en.wikipedia.org/w/api.php?action=query&titles=${data.scientificName}&prop=pageimages&format=json&pithumbsize=250`)\n                .then(resp => {\n                    const thumbnail = Object.values(resp.data.query.pages)[0].thumbnail;\n                    if (thumbnail) {\n                        setImageSrc(thumbnail.source);\n                    }\n                })\n                .catch(error => {\n                    console.error(error);\n                });\n        }\n    }, [data]);\n    return (\n        <div className=\"panel\">\n            {imageSrc && (<img className=\"pull-right\" src={imageSrc} />)}\n            <h2><i>{data.scientificName}</i></h2>\n            <h4>Common name: {data.primaryCommonName}</h4>\n            <h4>Family: {data.speciesGlobal.family}</h4>\n            <div>Informal taxonomy: {data.speciesGlobal.informalTaxonomy}</div>\n            <div>Comments: {ReactHtmlParser(data.speciesGlobal.taxonomicComments)}</div>\n            <div><div>Wikipedia:</div>\n            {loadingDescription ? (<p>Loading additional information...</p>) : ReactHtmlParser(description)}\n            </div>\n            <LoadImages data={data} />\n        </div>\n    );\n};\n\nexport default SpeciesRecord;","import React from 'react';\n\nconst Pagination = ({ resultsSummary, setPage, setRecordsPerPage }) => {\n    return (\n        <div>\n            <button onClick={() => setPage(0)}>First</button>\n            <button onClick={() => setPage(resultsSummary.page - 1)}>Previous</button>\n                    Page {resultsSummary.page} of {resultsSummary.totalPages}\n            <button onClick={() => setPage(resultsSummary.page + 1)}>Next</button>\n            <button onClick={() => setPage(resultsSummary.totalPages - 1)}>Last</button>\n        </div>\n    );\n}\nexport default Pagination;","import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport SpeciesRecord from './state/SpeciesRecord';\nimport Pagination from './pagination/Pagination';\n\nconst StateSearch = () => {\n    const states = [\"AL\", \"AK\", \"AS\", \"AZ\", \"AR\", \"CA\", \"CO\", \"CT\", \"DE\", \"DC\", \"FL\", \"GA\", \"GU\", \"HI\", \"ID\", \"IL\", \"IN\", \"IA\", \"KS\", \"KY\", \"LA\", \"ME\", \"MD\", \"MH\", \"MA\", \"MI\", \"FM\", \"MN\", \"MS\", \"MO\", \"MT\", \"NE\", \"NV\", \"NH\", \"NJ\", \"NM\", \"NY\", \"NC\", \"ND\", \"MP\", \"OH\", \"OK\", \"OR\", \"PW\", \"PA\", \"PR\", \"RI\", \"SC\", \"SD\", \"TN\", \"TX\", \"UT\", \"VT\", \"VA\", \"VI\", \"WA\", \"WV\", \"WI\", \"WY\"];\n    const [selectedState, setSelectedState] = useState(\"AL\");\n    const [result, setResult] = useState(undefined);\n    const [page, setPage] = useState(0);\n    const [recordsPerPage, setRecordsPerPage] = useState(20);\n\n    useEffect(() => {\n        axios.post(\n            `${window.location.host.includes('localhost') ? 'https://cors-anywhere.herokuapp.com/' : ''}https://explorer.natureserve.org/api/data/speciesSearch`,\n            {\n                \"criteriaType\": \"species\",\n                \"pagingOptions\": {\n                    page,\n                    recordsPerPage\n                },\n                \"locationCriteria\":\n                    [{ \"paramType\": \"subnation\", \"subnation\": selectedState, \"nation\": \"US\" }],\n                \"speciesTaxonomyCriteria\":\n                    [{ \"paramType\": \"scientificTaxonomy\", \"level\": \"KINGDOM\", \"scientificTaxonomy\": \"Plantae\" }]\n            })\n            .then(resp => {\n                console.log(resp);\n                setResult(resp.data);\n            })\n            .catch(error => {\n                console.error(error);\n            });\n    }, [selectedState, page, recordsPerPage]);\n\n    return (\n        <>\n            API Provided by https://explorer.natureserve.org/\n            <div className=\"pagination\">\n                {result && result.resultsSummary && <Pagination resultsSummary={result.resultsSummary} setPage={setPage} setRecordsPerPage={setRecordsPerPage} />}\n            </div>\n            <div>\n                Select a state:\n                <select onChange={e => setSelectedState(e.currentTarget.value)}>\n                    {states.map((state, i) => { return <option key={state} value={state}>{state}</option> })}\n                </select>\n            </div>\n            <div>\n                {result && (<p>Total species found for {selectedState}: {result.resultsSummary.speciesResults.total}</p>)}\n                {result && result.results.map((speciesRecord, i) => {\n                    return <SpeciesRecord key={i} data={speciesRecord} />\n                })}\n            </div>\n            <div className=\"pagination\">\n                {result && result.resultsSummary && <Pagination resultsSummary={result.resultsSummary} setPage={setPage} setRecordsPerPage={setRecordsPerPage} />}\n            </div>\n        </>\n    );\n}\n\nexport default StateSearch;","import React from 'react';\n\nconst Home = () => {\n    return <div>This project is for messing around with plant web APIs</div>\n}\nexport default Home;","import React from 'react';\nimport './App.css';\nimport FamilyTree from './FamilyTree';\nimport StateSearch from './StateSearch';\nimport Home from \"./Home\"\nimport {\n  Route,\n  NavLink,\n  HashRouter\n} from \"react-router-dom\";\n\nconst App = () => {\n  return (\n    <HashRouter>\n      <div>\n        <nav className=\"menu navbar pure-menu pure-menu-horizontal header-margin-bottom\">\n          <a href=\"#\" className=\"menu-link pure-menu-heading pure-menu-link \"><img className=\"logo\" src=\"https://freesvg.org/img/eco_spadassin_green_leaf_2_icon.png\" /></a>\n          {/* <NavLink className=\"pure-menu-heading pure-men u-link\" to=\"/tree\">Family Tree</NavLink> */}\n          <NavLink className=\"menu-link pure-menu-heading pure-menu-link\" to=\"/state\">State Search</NavLink>\n        </nav>\n        <ul className=\"header header-style\">\n        </ul>\n        <div className=\"content container\">\n          <Route exact path=\"/\" component={Home} />\n          {/* <Route exact path=\"/tree\" component={FamilyTree} /> disabling this page for now */}\n          <Route exact path=\"/state\" component={StateSearch} />\n        </div>\n      </div>\n    </HashRouter>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}