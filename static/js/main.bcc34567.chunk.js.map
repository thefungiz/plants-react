{"version":3,"sources":["worldsearch/LoadImages.js","worldsearch/SpeciesRecord.js","pagination/Pagination.js","worldsearch/WorldSearch.js","kingdomtree/LoadButton.js","kingdomtree/DefaultPanel.js","kingdomtree/Genus.js","kingdomtree/Family.js","kingdomtree/DivisionOrder.js","kingdomtree/DivisionClass.js","kingdomtree/Division.js","kingdomtree/SubKingdom.js","kingdomtree/Kingdom.js","properties.js","kingdomtree/KingdomTree.js","Home.js","App.js","serviceWorker.js","index.js"],"names":["LoadImages","data","useState","images","setImages","clicked","setClicked","ignoreImages","useEffect","length","map","image","i","alt","className","key","src","onClick","axios","get","scientificName","then","resp","Object","values","query","pages","forEach","x","title","response","imageinfo","url","includes","catch","error","console","SpeciesRecord","undefined","wikipediaExtract","setWikipediaExtract","imageSrc","setImageSrc","page","extract","fullurl","thumbnail","source","ReactHtmlParser","formattedScientificName","primaryCommonName","speciesGlobal","family","otherCommonNames","name","informalTaxonomy","taxonomicComments","Pagination","resultsSummary","setPage","inputEl","setRecordsPerPage","useRef","current","value","ref","type","defaultValue","onBlur","e","currentTarget","target","index","Math","floor","totalPages","handlePageNumberChange","StateSearch","selectedState","setSelectedState","result","setResult","recordsPerPage","post","log","onChange","state","speciesResults","total","results","speciesRecord","LoadButton","onLoad","linkPath","setState","loading","setLoading","hide","setHide","disabled","DefaultPanel","description","setDescription","loadingDescription","setLoadingDescription","slug","link","Genus","genus","setGenus","Family","setFamily","genuses","setGenuses","DivisionOrder","divisionOrder","setDivisionOrder","families","setFamilies","DivisionClass","divisionClass","setDivisionClass","division_orders","divisionOrders","setDivisionOrders","Division","division","setDivision","division_classes","divisionClasses","setDivisionClasses","SubKingdom","subkingdom","setSubkingdom","divisions","setDivisions","Kingdom","subkingdoms","setSubkingdoms","properties","FamilyTree","kingdoms","setKingdoms","token","setToken","handleLoad","callback","replace","kingdom","Home","App","to","exact","path","component","KingdomTree","WorldSearch","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.bcc34567.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport axios from 'axios';\n\nconst LoadImages = ({ data }) => {\n    const [images, setImages] = useState([]);\n    const [clicked, setClicked] = useState(false);\n    const ignoreImages = ['https://upload.wikimedia.org/wikipedia/commons/7/74/Red_Pencil_Icon.png', 'https://upload.wikimedia.org/wikipedia/en/4/4a/Commons-logo.svg', 'https://upload.wikimedia.org/wikipedia/commons/d/df/Wikispecies-logo.svg', 'https://upload.wikimedia.org/wikipedia/en/9/99/Question_book-new.svg'];\n\n    const getImages = () => {\n        setClicked(true);\n        axios.get(`https://en.wikipedia.org/w/api.php?action=query&origin=*&format=json&prop=images&titles=${data.scientificName}`)\n        .then(resp => {\n            const images = Object.values(resp.data.query.pages)[0].images;\n            if (images) {\n                images.forEach(x => {\n                    axios.get(`https://en.wikipedia.org/w/api.php?action=query&origin=*&format=json&titles=${x.title}&prop=imageinfo&iiprop=url`)\n                    .then(response => {\n                        const imageinfo = Object.values(response.data.query.pages)[0].imageinfo;\n                        if (imageinfo) {\n                            const url = imageinfo[0].url;\n                            if (url && !ignoreImages.includes(url)) {\n                                setImages(images => [ ...images ,imageinfo[0].url]);\n                            }\n                        }\n                    });\n                });\n            }\n        })\n        .catch(error => {\n            console.error(error);\n        });\n    }\n\n    useEffect(() => {\n        setImages([]);\n        setClicked(false);\n    }, [data]);\n\n    return (\n        <div>\n            {images.length > 0 && images.map((image, i) => {\n                return <img alt={image} className=\"image-fill-parent\" key={i} src={image} />\n            })}\n            {!clicked &&\n                (<button onClick={() => getImages()} >Load Additional Images</button>)\n            }\n        </div>\n    );\n}\nexport default LoadImages;","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport ReactHtmlParser from 'react-html-parser';\nimport LoadImages from './LoadImages';\n\nconst SpeciesRecord = ({ data }) => {\n    const [wikipediaExtract, setWikipediaExtract] = useState(undefined);\n    const [imageSrc, setImageSrc] = useState(undefined);\n    useEffect(() => {\n        setImageSrc(undefined);\n        setWikipediaExtract(undefined);\n        if (data.scientificName) {\n            axios.get(`https://en.wikipedia.org/w/api.php?action=query&origin=*&titles=${data.scientificName}&prop=extracts|info|pageimages&format=json&exintro=1&inprop=url&pithumbsize=250`)\n                .then(resp => {\n                    const page = Object.values(resp.data.query.pages)[0];\n                    if (page.extract) {\n                        setWikipediaExtract(page.extract + `<p>Source: <a target=\"_blank\" href=\"${page.fullurl}\">${page.title}</a> on Wikipedia</p?`);\n                    }\n                    if (page.thumbnail) {\n                        setImageSrc(page.thumbnail.source);\n                    }\n                })\n                .catch(error => {\n                    console.error(error);\n                });\n        }\n    }, [data]);\n    return (\n        <div className=\"panel\">\n            {imageSrc && (<img alt={data.scientificName} className=\"pull-right\" src={imageSrc} />)}\n            <h2>{ReactHtmlParser(data.formattedScientificName)}</h2>\n            <h4>Common name: {data.primaryCommonName}</h4>\n            <h4>Family: {data.speciesGlobal.family}</h4>\n            {data.speciesGlobal.otherCommonNames && data.speciesGlobal.otherCommonNames.length > 0 && <div><b>Other common names:</b><ul>{data.speciesGlobal.otherCommonNames.map((name, i) => {return <li key={i}>{name}</li>})}</ul></div>}\n            {data.speciesGlobal.informalTaxonomy && <div><b>Informal taxonomy:</b> {data.speciesGlobal.informalTaxonomy}</div>}\n            {data.speciesGlobal.taxonomicComments && <div><b>Comments:</b> {ReactHtmlParser(data.speciesGlobal.taxonomicComments)}</div>}\n            {wikipediaExtract && <div>{ReactHtmlParser(wikipediaExtract)}<LoadImages data={data} /></div>}\n        </div>\n    );\n};\n\nexport default SpeciesRecord;","import React, { useRef, useEffect } from 'react';\n\nconst Pagination = ({ resultsSummary, setPage, setRecordsPerPage }) => {\n\n    const inputEl = useRef(null);\n\n    const handlePageNumberChange = (target) => {\n        const index = Math.floor(target.value) - 1;\n        if (index !== resultsSummary.page && index >= 0 && index < resultsSummary.totalPages) {\n            setPage(index);\n        }\n        else {\n            target.value = resultsSummary.page + 1;\n        }\n    };\n\n    useEffect(() => {\n        inputEl.current.value = resultsSummary.page + 1;\n    }, [resultsSummary.page])\n\n    return (\n        <div className=\"row\">\n            <button className=\"pag-button\" onClick={() => setPage(0)}>{\"<<\"}</button>\n            <button className=\"pag-button\" onClick={() => setPage(resultsSummary.page - 1)}>{\"<\"}</button>\n                    Page <input ref={inputEl} className=\"pag-input\" type=\"number\" defaultValue={resultsSummary.page + 1} onBlur={(e) => e.currentTarget.value && handlePageNumberChange(e.currentTarget)} /> of {resultsSummary.totalPages}\n            <button className=\"pag-button\" onClick={() => setPage(resultsSummary.page + 1)}>{\">\"}</button>\n            <button className=\"pag-button\" onClick={() => setPage(resultsSummary.totalPages - 1)}>{\">>\"}</button>\n        </div>\n    );\n}\nexport default Pagination;","import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport SpeciesRecord from './SpeciesRecord';\nimport Pagination from '../pagination/Pagination';\n\nconst StateSearch = () => {\n    const states = [\"AL\", \"AK\", \"AS\", \"AZ\", \"AR\", \"CA\", \"CO\", \"CT\", \"DE\", \"DC\", \"FL\", \"GA\", \"GU\", \"HI\", \"ID\", \"IL\", \"IN\", \"IA\", \"KS\", \"KY\", \"LA\", \"ME\", \"MD\", \"MH\", \"MA\", \"MI\", \"FM\", \"MN\", \"MS\", \"MO\", \"MT\", \"NE\", \"NV\", \"NH\", \"NJ\", \"NM\", \"NY\", \"NC\", \"ND\", \"MP\", \"OH\", \"OK\", \"OR\", \"PW\", \"PA\", \"PR\", \"RI\", \"SC\", \"SD\", \"TN\", \"TX\", \"UT\", \"VT\", \"VA\", \"VI\", \"WA\", \"WV\", \"WI\", \"WY\"];\n    const [selectedState, setSelectedState] = useState(\"AL\");\n    const [result, setResult] = useState(undefined);\n    const [page, setPage] = useState(0);\n    const [recordsPerPage, setRecordsPerPage] = useState(20);\n\n    useEffect(() => {\n        axios.post(\n            `https://explorer.natureserve.org/api/data/speciesSearch`,\n            {\n                \"criteriaType\": \"species\",\n                \"pagingOptions\": {\n                    page,\n                    recordsPerPage\n                },\n                \"locationCriteria\":\n                    [{ \"paramType\": \"subnation\", \"subnation\": selectedState, \"nation\": \"US\" }],\n                \"speciesTaxonomyCriteria\":\n                    [{ \"paramType\": \"scientificTaxonomy\", \"level\": \"KINGDOM\", \"scientificTaxonomy\": \"Plantae\" }]\n            })\n            .then(resp => {\n                setResult(resp.data);\n                console.log(resp)\n            })\n            .catch(error => {\n                console.error(error);\n            });\n    }, [selectedState, page, recordsPerPage]);\n\n    return (\n        <div>\n            <h1>State Search</h1>\n            API Provided by https://explorer.natureserve.org/\n            <div className=\"row\">\n                <div className=\"six columns\">\n                    Select a state:\n                <select onChange={e => setSelectedState(e.currentTarget.value)}>\n                        {states.map((state, i) => { return <option key={state} value={state}>{state}</option> })}\n                    </select>\n                    {result && (<p>Total species found for {selectedState}: {result.resultsSummary.speciesResults.total}</p>)}\n                </div>\n                <div className=\"six columns pagination\">\n                    {result && result.resultsSummary && <Pagination resultsSummary={result.resultsSummary} setPage={setPage} setRecordsPerPage={setRecordsPerPage} />}\n                </div>\n            </div>\n            <div>\n                {result && result.results.map((speciesRecord, i) => {\n                    return <SpeciesRecord key={i} data={speciesRecord} />\n                })}\n            </div>\n        </div>\n    );\n}\n\nexport default StateSearch;","import React, { useState } from 'react';\n\nconst LoadButton = ({onLoad, linkPath, setState}) => {\n    const [loading, setLoading] = useState(false);\n    const [hide, setHide] = useState(false);\n\n    const handleClick = () => {\n        setLoading(true);\n        onLoad(linkPath, setState, () => {setLoading(false); setHide(true)});\n    };\n\n    return(\n        <div className=\"center\">\n            {!loading && !hide && \n            <button  disabled={loading} onClick={() => handleClick()}>Load Children</button>}\n        </div>\n    );\n};\n\nexport default LoadButton;","import React, { useState, useEffect } from \"react\";\nimport LoadButton from './LoadButton';\nimport axios from 'axios';\nimport ReactHtmlParser from 'react-html-parser';\n\nconst DefaultPanel = ({ type, onLoad, data, setState }) => {\n    const [description, setDescription] = useState(undefined);\n    const [loadingDescription, setLoadingDescription] = useState(false);\n    const [imageSrc, setImageSrc] = useState(undefined);\n    useEffect(() => {\n        setLoadingDescription(true);\n        if (data.slug) {\n            axios.get(`https://en.wikipedia.org/w/api.php?action=query&origin=*&titles=${data.slug}&prop=extracts&format=json&exintro=1`)\n                .then(resp => {\n                    const result = Object.values(resp.data.query.pages)[0].extract;\n                    setDescription(result ? result : '<p class=\"center\">No description found</p>');\n                    setLoadingDescription(false);\n                })\n                .catch(error => {\n                    console.error(error);\n                    setLoadingDescription(false);\n                });\n        }\n    }, []);\n    useEffect(() => {\n        if (data.slug) {\n            axios.get(`https://en.wikipedia.org/w/api.php?action=query&origin=*&titles=${data.slug}&prop=pageimages&format=json&pithumbsize=250`)\n                .then(resp => {\n                    const thumbnail = Object.values(resp.data.query.pages)[0].thumbnail;\n                    if (thumbnail) {\n                        setImageSrc(thumbnail.source);\n                    }\n                })\n                .catch(error => {\n                    console.error(error);\n                });\n        }\n    }, []);\n\n    return (\n        <div className=\"panel\">\n            <h4 className=\"center\">{type}: {data.name}</h4>\n            <div>\n                {imageSrc && (<img className=\"pull-right\" src={imageSrc} />)}\n                {loadingDescription ? (<p>Loading additional information...</p>) : ReactHtmlParser(description)}\n            </div>\n            <LoadButton onLoad={onLoad} linkPath={data.link} setState={setState} />\n        </div>\n    );\n};\n\nexport default DefaultPanel;","\nimport React, { useState, useEffect } from \"react\";\nimport DefaultPanel from './DefaultPanel';\n\nconst Genus = ({data, onLoad}) => {\n    const [genus, setGenus] = useState(data);\n    return (\n        <div>\n            <DefaultPanel type=\"Genus\" onLoad={onLoad} data={genus} setState={setGenus} />\n        </div>\n    );\n}\nexport default Genus;","\nimport React, { useState, useEffect } from \"react\";\nimport DefaultPanel from './DefaultPanel';\nimport Genus from \"./Genus\";\n\nconst Family = ({data, onLoad}) => {\n    const [family, setFamily] = useState(data);\n    const [genuses, setGenuses] = useState(family.genuses);\n    useEffect(() => {\n        if (family.genuses) {\n            setGenuses(family.genuses);\n        }\n    }, [family]);\n\n    return (\n        <div>\n            <DefaultPanel type=\"Family\" onLoad={onLoad} data={family} setState={setFamily} />\n            <div className=\"margin-left\">\n                {genuses && genuses.map((genus, i) => {\n                    return <Genus key={i} onLoad={onLoad} data={genus} />\n                })}\n            </div>\n        </div>\n    );\n}\nexport default Family;","\nimport React, { useState, useEffect } from \"react\";\nimport DefaultPanel from './DefaultPanel';\nimport Family from './Family';\n\nconst DivisionOrder = ({data, onLoad}) => {\n    const [divisionOrder, setDivisionOrder] = useState(data);\n    const [families, setFamilies] = useState(divisionOrder.families);\n    useEffect(() => {\n        if (divisionOrder.families) {\n            setFamilies(divisionOrder.families);\n        }\n    }, [divisionOrder]);\n\n    return (\n        <div>\n            <DefaultPanel type=\"Division Order\" onLoad={onLoad} data={divisionOrder} setState={setDivisionOrder} />\n            <div className=\"margin-left\">\n                {families && families.map((family, i) => {\n                    return <Family key={i} onLoad={onLoad} data={family} />\n                })}\n            </div>\n        </div>\n    );\n}\nexport default DivisionOrder;","\nimport React, { useState, useEffect } from \"react\";\nimport DefaultPanel from './DefaultPanel';\nimport DivisionOrder from './DivisionOrder';\n\nconst DivisionClass = ({data, onLoad}) => {\n    const [divisionClass, setDivisionClass] = useState(data);\n    const [divisionOrders, setDivisionOrders] = useState(divisionClass.division_orders);\n    useEffect(() => {\n        if (divisionClass.division_orders) {\n            setDivisionOrders(divisionClass.division_orders);\n        }\n    }, [divisionClass])\n\n    return (\n        <div>\n            <DefaultPanel type=\"Division Class\" onLoad={onLoad} data={divisionClass} setState={setDivisionClass} />\n            <div className=\"margin-left\">\n                {divisionOrders && divisionOrders.map((divisionOrder, i) => {\n                    return <DivisionOrder key={i} onLoad={onLoad} data={divisionOrder} />\n                })}\n            </div>\n        </div>\n    );\n}\nexport default DivisionClass;","import React, { useState, useEffect } from \"react\";\nimport DefaultPanel from './DefaultPanel';\nimport DivisionClass from './DivisionClass';\n\nconst Division = ({data, onLoad}) => {\n    const [division, setDivision] = useState(data);\n    const [divisionClasses, setDivisionClasses] = useState(division.division_classes);\n    useEffect(() => {\n        if (division.division_classes) {\n            setDivisionClasses(division.division_classes);\n        }\n    }, [division])\n\n    return (\n        <div>\n            <DefaultPanel type=\"Division\" onLoad={onLoad} data={division} setState={setDivision} />\n            <div className=\"margin-left\">\n                {divisionClasses && divisionClasses.map((divisionClass, i) => {\n                    return <DivisionClass key={i} onLoad={onLoad} data={divisionClass} />\n                })}\n            </div>\n        </div>\n    );\n}\nexport default Division;","import React, { useState, useEffect } from \"react\";\nimport DefaultPanel from \"./DefaultPanel\";\nimport Division from \"./Division\";\n\nconst SubKingdom = ({data, onLoad}) => {\n    const [subkingdom, setSubkingdom] = useState(data);\n    const [divisions, setDivisions] = useState([]);\n    useEffect(() => {\n        if (subkingdom.divisions) {\n            setDivisions(subkingdom.divisions);\n        }\n    }, [subkingdom]);\n    return (\n        <div>\n            <DefaultPanel type=\"Subkingdom\" onLoad={onLoad} data={subkingdom} setState={setSubkingdom} />\n            <div className=\"margin-left\">\n                {divisions && divisions.map((division, i) => {\n                    return <Division key={i} data={division} onLoad={onLoad} />\n                })}\n            </div>\n        </div>\n    );\n}\n\nexport default SubKingdom;","import React, { useState, useEffect } from 'react';\nimport SubKingdom from './SubKingdom';\n\nconst Kingdom = ({data, onLoad}) => {\n    const [subkingdoms, setSubkingdoms] = useState([]);\n    useEffect(() => {\n        if (data.subkingdoms) {\n            setSubkingdoms(data.subkingdoms);\n        }\n    }, []);\n    return (\n        <div>\n            <div className=\"panel\">\n                <h2 className=\"center\">Kingdom: {data.name}</h2>\n            </div>\n            <div className=\"margin-left\">\n                {subkingdoms && subkingdoms.map((subkingdom, i) => {\n                    return <SubKingdom onLoad={onLoad} key={i} data={subkingdom} />\n                })}\n            </div>\n        </div>\n    );\n}\nexport default Kingdom;","\nexport const properties = {\n    tokenPath: \"https://us-central1-trefle-api-token.cloudfunctions.net/tokenGET\"\n} ","import React, { useEffect, useState } from 'react';\nimport Kingdom from './Kingdom';\nimport axios from 'axios';\nimport {properties} from '../properties'\n\nconst FamilyTree = () => {\n    const [kingdoms, setKingdoms] = useState([]);\n    const [token, setToken] = useState(undefined);\n    \n    useEffect(() => {\n        axios.get(properties.tokenPath)\n            .then(resp => {\n                setToken(resp.data.token)\n            })\n            .catch(error => {\n                console.log(error);\n            });\n    }, []);\n\n    useEffect(() => {\n        if (token) {\n            handleLoad('https://trefle.io/api/kingdoms', setKingdoms);\n        }\n    }, [token])\n\n    const handleLoad = (linkPath, setState, callback) => {\n        axios.get(`${linkPath.replace('http:', 'https:')}?token=${token}`)\n            .then(resp => {\n                setState(resp.data);\n                callback && callback();\n            })\n            .catch(error => {\n                console.error(error);\n                callback && callback(); \n            });\n    }\n\n    return (\n        <>\n            <h1>Kingdom Tree</h1>\n            {kingdoms && kingdoms.map((kingdom, i) => {\n                return <Kingdom key={i} data={kingdom} onLoad={handleLoad} />\n            })}\n        </>\n    );\n}\n\nexport default FamilyTree;","import React from 'react';\n\nconst Home = () => {\n    return <div>This project is for messing around with plant web APIs</div>\n}\nexport default Home;","import React from 'react';\nimport './App.css';\nimport WorldSearch from './worldsearch/WorldSearch';\nimport KingdomTree from './kingdomtree/KingdomTree';\nimport Home from \"./Home\"\nimport {\n  Route,\n  NavLink,\n  HashRouter\n} from \"react-router-dom\";\n\nconst App = () => {\n  return (\n    <HashRouter>\n      <div>\n        <nav className=\"menu navbar pure-menu pure-menu-horizontal header-margin-bottom\">\n          <NavLink className=\"menu-link pure-menu-heading pure-menu-link\" to=\"/\"><img alt=\"logo\" className=\"logo\" src=\"https://freesvg.org/img/eco_spadassin_green_leaf_2_icon.png\" /></NavLink>\n          <NavLink className=\"menu-link pure-menu-heading pure-menu-link\" to=\"/kingdom\">Plant Kingdom</NavLink>\n          <NavLink className=\"menu-link pure-menu-heading pure-menu-link\" to=\"/world\">World Search</NavLink>\n        </nav>\n        <ul className=\"header header-style\">\n        </ul>\n        <div className=\"content container\">\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/kingdom\" component={KingdomTree} />\n          <Route exact path=\"/world\" component={WorldSearch} />\n        </div>\n      </div>\n    </HashRouter>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}