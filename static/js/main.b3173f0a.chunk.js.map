{"version":3,"sources":["familytree/LoadButton.js","familytree/DefaultPanel.js","familytree/Genus.js","familytree/Family.js","familytree/DivisionOrder.js","familytree/DivisionClass.js","familytree/Division.js","familytree/SubKingdom.js","familytree/Kingdom.js","properties.js","FamilyTree.js","state/SpeciesRecord.js","StateSearch.js","Home.js","App.js","serviceWorker.js","index.js"],"names":["LoadButton","onLoad","linkPath","setState","useState","loading","setLoading","hide","setHide","className","disabled","onClick","DefaultPanel","type","data","undefined","description","setDescription","loadingDescription","setLoadingDescription","imageSrc","setImageSrc","useEffect","slug","axios","get","then","resp","result","Object","values","query","pages","extract","catch","error","console","thumbnail","source","name","src","ReactHtmlParser","link","Genus","genus","setGenus","Family","family","setFamily","genuses","setGenuses","map","i","key","DivisionOrder","divisionOrder","setDivisionOrder","families","setFamilies","DivisionClass","divisionClass","setDivisionClass","division_orders","divisionOrders","setDivisionOrders","Division","division","setDivision","division_classes","divisionClasses","setDivisionClasses","SubKingdom","subkingdom","setSubkingdom","divisions","setDivisions","Kingdom","subkingdoms","setSubkingdoms","properties","token","prompt","FamilyTree","kingdoms","setKingdoms","handleLoad","callback","kingdom","SpeciesRecord","scientificName","primaryCommonName","speciesGlobal","informalTaxonomy","taxonomicComments","StateSearch","setResult","post","log","resultsSummary","speciesResults","total","results","speciesRecord","Home","App","href","to","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.b3173f0a.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nconst LoadButton = ({onLoad, linkPath, setState}) => {\n    const [loading, setLoading] = useState(false);\n    const [hide, setHide] = useState(false);\n\n    const handleClick = () => {\n        setLoading(true);\n        onLoad(linkPath, setState, () => {setLoading(false); setHide(true)});\n    };\n\n    return(\n        <div className=\"center\">\n            {!loading && !hide && \n            <button  disabled={loading} onClick={() => handleClick()}>Load Children</button>}\n        </div>\n    );\n};\n\nexport default LoadButton;","import React, { useState, useEffect } from \"react\";\nimport LoadButton from './LoadButton';\nimport axios from 'axios';\nimport ReactHtmlParser from 'react-html-parser';\n\nconst DefaultPanel = ({ type, onLoad, data, setState }) => {\n    const [description, setDescription] = useState(undefined);\n    const [loadingDescription, setLoadingDescription] = useState(false);\n    const [imageSrc, setImageSrc] = useState(undefined);\n    useEffect(() => {\n        setLoadingDescription(true);\n        if (data.slug) {\n            axios.get(`https://cors-anywhere.herokuapp.com/https://en.wikipedia.org/w/api.php?action=query&titles=${data.slug}&prop=extracts&format=json&exintro=1`)\n                .then(resp => {\n                    const result = Object.values(resp.data.query.pages)[0].extract;\n                    setDescription(result ? result : '<p class=\"center\">No description found</p>');\n                    setLoadingDescription(false);\n                })\n                .catch(error => {\n                    console.error(error);\n                    setLoadingDescription(false);\n                });\n        }\n    }, []);\n    useEffect(() => {\n        if (data.slug) {\n            axios.get(`https://cors-anywhere.herokuapp.com/https://en.wikipedia.org/w/api.php?action=query&titles=${data.slug}&prop=pageimages&format=json&pithumbsize=250`)\n                .then(resp => {\n                    const thumbnail = Object.values(resp.data.query.pages)[0].thumbnail;\n                    if (thumbnail) {\n                        setImageSrc(thumbnail.source);\n                    }\n                })\n                .catch(error => {\n                    console.error(error);\n                });\n        }\n    }, []);\n\n    return (\n        <div className=\"panel\">\n            <h4 className=\"center\">{type}: {data.name}</h4>\n            <div>\n                {imageSrc && (<img className=\"pull-right\" src={imageSrc} />)}\n                {loadingDescription ? (<p>Loading additional information...</p>) : ReactHtmlParser(description)}\n            </div>\n            <LoadButton onLoad={onLoad} linkPath={data.link} setState={setState} />\n        </div>\n    );\n};\n\nexport default DefaultPanel;","\nimport React, { useState, useEffect } from \"react\";\nimport DefaultPanel from './DefaultPanel';\n\nconst Genus = ({data, onLoad}) => {\n    const [genus, setGenus] = useState(data);\n    return (\n        <div>\n            <DefaultPanel type=\"Genus\" onLoad={onLoad} data={genus} setState={setGenus} />\n        </div>\n    );\n}\nexport default Genus;","\nimport React, { useState, useEffect } from \"react\";\nimport DefaultPanel from './DefaultPanel';\nimport Genus from \"./Genus\";\n\nconst Family = ({data, onLoad}) => {\n    const [family, setFamily] = useState(data);\n    const [genuses, setGenuses] = useState(family.genuses);\n    useEffect(() => {\n        if (family.genuses) {\n            setGenuses(family.genuses);\n        }\n    }, [family]);\n\n    return (\n        <div>\n            <DefaultPanel type=\"Family\" onLoad={onLoad} data={family} setState={setFamily} />\n            <div className=\"margin-left\">\n                {genuses && genuses.map((genus, i) => {\n                    return <Genus key={i} onLoad={onLoad} data={genus} />\n                })}\n            </div>\n        </div>\n    );\n}\nexport default Family;","\nimport React, { useState, useEffect } from \"react\";\nimport DefaultPanel from './DefaultPanel';\nimport Family from './Family';\n\nconst DivisionOrder = ({data, onLoad}) => {\n    const [divisionOrder, setDivisionOrder] = useState(data);\n    const [families, setFamilies] = useState(divisionOrder.families);\n    useEffect(() => {\n        if (divisionOrder.families) {\n            setFamilies(divisionOrder.families);\n        }\n    }, [divisionOrder]);\n\n    return (\n        <div>\n            <DefaultPanel type=\"Division Order\" onLoad={onLoad} data={divisionOrder} setState={setDivisionOrder} />\n            <div className=\"margin-left\">\n                {families && families.map((family, i) => {\n                    return <Family key={i} onLoad={onLoad} data={family} />\n                })}\n            </div>\n        </div>\n    );\n}\nexport default DivisionOrder;","\nimport React, { useState, useEffect } from \"react\";\nimport DefaultPanel from './DefaultPanel';\nimport DivisionOrder from './DivisionOrder';\n\nconst DivisionClass = ({data, onLoad}) => {\n    const [divisionClass, setDivisionClass] = useState(data);\n    const [divisionOrders, setDivisionOrders] = useState(divisionClass.division_orders);\n    useEffect(() => {\n        if (divisionClass.division_orders) {\n            setDivisionOrders(divisionClass.division_orders);\n        }\n    }, [divisionClass])\n\n    return (\n        <div>\n            <DefaultPanel type=\"Division Class\" onLoad={onLoad} data={divisionClass} setState={setDivisionClass} />\n            <div className=\"margin-left\">\n                {divisionOrders && divisionOrders.map((divisionOrder, i) => {\n                    return <DivisionOrder key={i} onLoad={onLoad} data={divisionOrder} />\n                })}\n            </div>\n        </div>\n    );\n}\nexport default DivisionClass;","import React, { useState, useEffect } from \"react\";\nimport DefaultPanel from './DefaultPanel';\nimport DivisionClass from './DivisionClass';\n\nconst Division = ({data, onLoad}) => {\n    const [division, setDivision] = useState(data);\n    const [divisionClasses, setDivisionClasses] = useState(division.division_classes);\n    useEffect(() => {\n        if (division.division_classes) {\n            setDivisionClasses(division.division_classes);\n        }\n    }, [division])\n\n    return (\n        <div>\n            <DefaultPanel type=\"Division\" onLoad={onLoad} data={division} setState={setDivision} />\n            <div className=\"margin-left\">\n                {divisionClasses && divisionClasses.map((divisionClass, i) => {\n                    return <DivisionClass key={i} onLoad={onLoad} data={divisionClass} />\n                })}\n            </div>\n        </div>\n    );\n}\nexport default Division;","import React, { useState, useEffect } from \"react\";\nimport DefaultPanel from \"./DefaultPanel\";\nimport Division from \"./Division\";\n\nconst SubKingdom = ({data, onLoad}) => {\n    const [subkingdom, setSubkingdom] = useState(data);\n    const [divisions, setDivisions] = useState([]);\n    useEffect(() => {\n        if (subkingdom.divisions) {\n            setDivisions(subkingdom.divisions);\n        }\n    }, [subkingdom]);\n    return (\n        <div>\n            <DefaultPanel type=\"Subkingdom\" onLoad={onLoad} data={subkingdom} setState={setSubkingdom} />\n            <div className=\"margin-left\">\n                {divisions && divisions.map((division, i) => {\n                    return <Division key={i} data={division} onLoad={onLoad} />\n                })}\n            </div>\n        </div>\n    );\n}\n\nexport default SubKingdom;","import React, { useState, useEffect } from 'react';\nimport SubKingdom from './SubKingdom';\n\nconst Kingdom = ({data, onLoad}) => {\n    const [subkingdoms, setSubkingdoms] = useState([]);\n    useEffect(() => {\n        if (data.subkingdoms) {\n            setSubkingdoms(data.subkingdoms);\n        }\n    }, []);\n    return (\n        <div>\n            <div className=\"panel\">\n                <h2 className=\"center\">Kingdom: {data.name}</h2>\n            </div>\n            <div className=\"margin-left\">\n                {subkingdoms && subkingdoms.map((subkingdom, i) => {\n                    return <SubKingdom onLoad={onLoad} key={i} data={subkingdom} />\n                })}\n            </div>\n        </div>\n    );\n}\nexport default Kingdom;","\nexport const properties = {\n    token: prompt(\"Please enter API key. One can be created here - https://trefle.io/\")// override this for easier local development\n} ","import React, { useEffect, useState } from 'react';\nimport Kingdom from './familytree/Kingdom';\nimport axios from 'axios';\nimport { properties } from './properties';\n\nconst FamilyTree = () => {\n    const [kingdoms, setKingdoms] = useState([]);\n    const token = properties.token;\n\n    const handleLoad = (linkPath, setState, callback) => {\n        axios.get(`https://cors-anywhere.herokuapp.com/${linkPath}?token=${token}`)\n            .then(resp => {\n                setState(resp.data);\n                callback && callback();\n            })\n            .catch(error => {\n                console.error(error);\n                callback && callback(); \n            });\n    }\n\n    useEffect(() => {\n        handleLoad('https://trefle.io/api/kingdoms', setKingdoms);\n    }, []);\n\n    return (\n        <>\n            <h1>Family Tree</h1>\n            {kingdoms && kingdoms.map((kingdom, i) => {\n                return <Kingdom key={i} data={kingdom} onLoad={handleLoad} />\n            })}\n        </>\n    );\n}\n\nexport default FamilyTree;","import React, {useState, useEffect} from 'react';\nimport axios from 'axios';\nimport ReactHtmlParser from 'react-html-parser';\n\nconst SpeciesRecord = ({data}) => {\n    const [description, setDescription] = useState(undefined);\n    const [loadingDescription, setLoadingDescription] = useState(false);\n    const [imageSrc, setImageSrc] = useState(undefined);\n    useEffect(() => {\n        setLoadingDescription(true);\n        if (data.scientificName) {\n            axios.get(`https://cors-anywhere.herokuapp.com/https://en.wikipedia.org/w/api.php?action=query&titles=${data.scientificName}&prop=extracts&format=json&exintro=1`)\n                .then(resp => {\n                    const result = Object.values(resp.data.query.pages)[0].extract;\n                    setDescription(result ? result : '<p class=\"center\">No description found</p>');\n                    setLoadingDescription(false);\n                })\n                .catch(error => {\n                    console.error(error);\n                    setLoadingDescription(false);\n                });\n        }\n    }, []);\n    useEffect(() => {\n        if (data.scientificName) {\n            axios.get(`https://cors-anywhere.herokuapp.com/https://en.wikipedia.org/w/api.php?action=query&titles=${data.scientificName}&prop=pageimages&format=json&pithumbsize=250`)\n                .then(resp => {\n                    const thumbnail = Object.values(resp.data.query.pages)[0].thumbnail;\n                    if (thumbnail) {\n                        setImageSrc(thumbnail.source);\n                    }\n                })\n                .catch(error => {\n                    console.error(error);\n                });\n        }\n    }, []);\n    return (\n        <div className=\"panel\">\n            <h2>{data.scientificName}</h2>\n            <div>\n                {imageSrc && (<img className=\"pull-right\" src={imageSrc} />)}\n                Primary Common Name: {data.primaryCommonName}<br/>\n                Family: {data.speciesGlobal.family}<br/>\n                Informal taxonomy: {data.speciesGlobal.informalTaxonomy}<br/>\n                Comments: {ReactHtmlParser(data.speciesGlobal.taxonomicComments)}\n                {loadingDescription ? (<p>Loading additional information...</p>) : ReactHtmlParser(description)}\n            </div>\n        </div>\n    );\n};\n\nexport default SpeciesRecord;","import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport SpeciesRecord from './state/SpeciesRecord';\n\n//curl -i -d '\n// {\"criteriaType\":\"species\",\"locationCriteria\":[{\"paramType\":\"subnation\", \"subnation\": \"NE\", \"nation\":\"US\"}], \"speciesTaxonomyCriteria\": [{\"paramType\" : \"scientificTaxonomy\",\"level\" : \"KINGDOM\",\"scientificTaxonomy\" : \"Plantae\"}]}' \n// -X POST \"https://explorer.natureserve.org/api/data/speciesSearch\" -H \"Accept: application/json\" -H \"Content-Type: application/json; charset=UTF-8\"\n\nconst StateSearch = () => {\n    const [result, setResult] = useState(undefined);\n\n    useEffect(() => {\n        axios.post(\n            'https://cors-anywhere.herokuapp.com/https://explorer.natureserve.org/api/data/speciesSearch',\n            {\"criteriaType\":\"species\",\"locationCriteria\":[{\"paramType\":\"subnation\", \"subnation\": \"NE\", \"nation\":\"US\"}], \"speciesTaxonomyCriteria\": [{\"paramType\" : \"scientificTaxonomy\",\"level\" : \"KINGDOM\",\"scientificTaxonomy\" : \"Plantae\"}]})\n            .then(resp => {\n                console.log(resp);\n                setResult(resp.data);\n            })\n            .catch(error => {\n                console.error(error);\n            });\n    }, []);\n\n    return (\n        <>\n            {result && (<p>Total species found for NE: {result.resultsSummary.speciesResults.total}</p>)}\n            {result && result.results.map((speciesRecord, i) => {\n                return <SpeciesRecord key={i} data={speciesRecord} />\n            })}\n        </>\n    );\n}\n\nexport default StateSearch;","import React from 'react';\n\nconst Home = () => {\n    return <div>Welcome home!</div>\n}\nexport default Home;","import React from 'react';\nimport './App.css';\nimport FamilyTree from './FamilyTree';\nimport StateSearch from './StateSearch';\nimport Home from \"./Home\"\nimport {\n  Route,\n  NavLink,\n  HashRouter\n} from \"react-router-dom\";\n\nconst App = () => {\n  return (\n    <HashRouter>\n      <div>\n        <nav className=\"navbar pure-menu pure-menu-horizontal header-margin-bottom\">\n          <a href=\"#\" className=\"pure-menu-heading pure-menu-link \">Plants!</a>\n          <NavLink className=\"pure-menu-heading pure-menu-link\" to=\"/tree\">Family Tree</NavLink>\n          <NavLink className=\"pure-menu-heading pure-menu-link\" to=\"/state\">State Search</NavLink>\n        </nav>\n        <ul className=\"header header-style\">\n        </ul>\n        <div className=\"content container\">\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/tree\" component={FamilyTree} />\n          <Route exact path=\"/state\" component={StateSearch} />\n        </div>\n      </div>\n    </HashRouter>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}